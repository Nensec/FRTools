@model FRTools.Web.Models.PinglistEntriesViewModel

<div class="row">
    <div class="col-md-8">
        <div class="card mt-3">
            <div class="card-body">
                <ul id="entryContainer" tabindex="0" role="listbox">
                    @foreach (var entry in Model.PinglistEntries)
                    {
                        <li class="text-nowrap" @(Model.SecretKey != null || (entry.FRUser.User != null && entry.FRUser.User.Id == Model.CurrentUserId) ? $"secretkey={entry.SecretKey}" : "") entryid="@(entry.EntryId)" userid="@(entry.FRUser.FRId)" username="@(entry.FRUser.Username)" role="option" onclick="selectEntry(this)" title="@(entry.Remarks)">@(entry.FRUser.Username) (@(entry.FRUser.FRId)) @Html.Raw(!string.IsNullOrEmpty(entry.Remarks) ? "<span class=\"fa fa-comment\"></span>" : "")</li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card-body px-0 pt-0 mt-3" id="entryManagement">
            @if (Model.IsPublic && Model.CurrentUserId != null && Model.SecretKey == null)
            {
                var onList = Model.PinglistEntries.Any(x => x.FRUser.User?.Id == Model.CurrentUserId);
                <button @(onList ? "disabled" : "") id="AddEntryButton" onclick="addEntry()" class="btn btn-primary col-md-12">Add Self</button>
            }
            else if (Model.IsPublic || Model.SecretKey != null)
            {
                <button id="AddEntryButton" onclick="addEntry()" class="btn btn-primary col-md-12">Add new</button>
            }
            @if (Model.IsPublic || Model.SecretKey != null)
            {
        <button id="EditEntryButton" onclick="editEntry()" disabled class="btn btn-warning col-md-12">Edit selected</button>
            }
            <button id="RemoveEntryButton" onclick="deleteEntry()" disabled class="btn btn-danger col-md-12">Remove selected</button>
            @if (Model.IsPublic || Model.SecretKey != null)
            {
                <button id="SetSecretKey" onclick="setSecretKey()" style="display: none;" data-toggle="tooltip" title="If you have the secret key for this entry, you can set it by clicking here" class="btn btn-info col-md-12">Set secret key</button>
            }
            <hr/>
            <div id="SearchContainer">
                <label for="SearchEntry">Search</label> <span data-toggle="tooltip" class="fa fa-info-circle" title="Enter the full name or FR user ID"></span>
                <input type="text" id="SearchEntry" class="form-control" />
            </div>
        </div>
    </div>
    <div class="col-md-12">
        @if (Model.SecretKey != null)
        {
            <a href="@Url.RouteUrl("PinglistBatchUpdateUsers", new { listId = Model.ListId, secretKey = Model.SecretKey})" class="btn btn-warning w-100 mt-3" data-toggle="tooltip" title="This will go and update every single user on your pinglist for a change in username, every user can only be updated once a day!" onclick="updateUsers(event)">Update all users on this pinglist</a>
        }
    </div>
</div>

<div id="EditModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit entry <span class="modalEntry"></span></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="EditForm" action="@Url.RouteUrl("PinglistEntryManage")" method="POST">
                    @Html.HiddenFor(model => model.ListId)
                    @Html.HiddenFor(model => model.SecretKey)
                    <input type="hidden" id="EntryViewModel_EntryId" name="EntryViewModel.EntryId" />
                    <input type="hidden" id="EntryViewModel_SecretKey" name="EntryViewModel.SecretKey" />
                    <div class="form-group">
                        <label for="EntryViewModel_Remarks" class="control-label">Remarks</label>
                        <textarea class="form-control" placeholder="No remarks" id="EntryViewModel_Remarks" name="EntryViewModel.Remarks"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary submit_button" onclick="$('#EditForm').submit()">Edit entry</button>
            </div>
        </div>
    </div>
</div>

<div id="AddModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add entry</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="AddForm" action="@Url.RouteUrl(Model.IsPublic && Model.CurrentUserId != null && Model.SecretKey == null ? "PinglistAddSelfPost" : "PinglistAddEntryPost")" method="POST">
                    @Html.HiddenFor(model => model.ListId)
                    @Html.HiddenFor(model => model.SecretKey)
                    @if ((Model.IsPublic && Model.CurrentUserId == null) || Model.SecretKey != null)
                    {
                        <div class="form-group">
                            <label for="" class="control-label">Username</label>
                            <input type="text" id="Username" name="Username" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="" id="UserId" class="control-label">User id</label>
                            <input type="text" id="UserId" name="UserId" class="form-control" />
                        </div>
                        <hr />
                    }
                    <div class="form-group">
                        <label for="Remarks" class="control-label">Remarks</label>
                        <textarea class="form-control" placeholder="No remarks" id="Remarks" name="Remarks"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary submit_button" onclick="$('#AddForm').submit()">Add entry</button>
            </div>
        </div>
    </div>
</div>


<style>
    #entryContainer {
        padding: 0;
        margin: 0;
        height: 100%;
        width:100%;
        max-height: 450px;
        min-height: 219px;
        overflow-y: scroll;
        overflow-x: auto;
    }

        #entryContainer:focus {
            outline: none;
        }

        #entryContainer li {
            display: block;
            height: 2.5em;
            line-height: 2.5em;
            padding: 0 5px;
            transition: all 0.5s ease-in-out;
            -moz-transition: all 0.5s ease-in-out;
            -webkit-transition: all 0.5s;
        }

            #entryContainer li[aria-selected="true"] {
                background: #d9edf7;
            }

    #entryManagement button {
        width: 100%;
        margin: 1px 0;
    }
</style>

<script>
    var selectedEntry = undefined;
    var entriesLookup = [
        @foreach (var entry in Model.PinglistEntries)
{
        @:{ fid: '@(entry.FRUser.FRId)', name: '@(entry.FRUser.Username.ToLower())', eid: '@(entry.EntryId)' },
        }
    ];

    $(function () {
        $('#SearchEntry').on('input', function (a, b) {
            var val = $(a.target).val().toLowerCase();
            var filter = entriesLookup.filter(x => x.fid == val || x.name == val || x.eid.toLowerCase() == val)
            if (filter.length == 1) {
                var entry = $(`li[entryId="${filter[0].eid}"]`);
                $('#entryContainer').scrollTo(entry);
                selectEntry(entry[0]);
                $('#SearchContainer').removeClass('has-error');
                $('#SearchContainer').addClass('has-success');
            }
            else {
                deselectEntry();
                if (val == '') {
                    $('#SearchContainer').removeClass(['has-error', 'has-success']);
                } else {
                    $('#SearchContainer').removeClass('has-success');
                    $('#SearchContainer').addClass('has-error');
                }
            }
        });

        var storageVal = localStorage.getItem('@(Model.ListId)');
        if (storageVal) {
            var storage = JSON.parse(storageVal);
            for (entryId in storage)
                $(`li[entryId="${entryId}"]`).attr('secretKey', storage[entryId]).attr('manualsecret', 'true');
        }

        $('.modal-content').keypress(function(e) {
            if(e.which == 13) {
                var submitButton = $('.modal-footer .submit_button', this);
                if(submitButton.length != 0) {
                    submitButton.click();
                }
            }
        })

        $('#AddModal').on('shown.bs.modal', function () {
            $("input:text:visible:first", '#AddModal').focus();
        })

        $('#EditModal').on('shown.bs.modal', function () {
            $("textarea:first", '#EditModal').focus();
        })
    });

    selectEntry = function (entry) {
        entry = $(entry);
        selectedEntry =
            {
                entryId: entry.attr('entryid'),
                secretKey: entry.attr('secretkey'),
                remarks: entry.attr('title'),
                manualSecret: entry.attr('manualsecret'),
                userId: entry.attr('userid'),
                isSelected: entry.attr('aria-selected')
            };
        if (selectedEntry.isSelected === 'true') {
            deselectEntry();
        }
        else {
            $('#entryContainer li').attr('aria-selected', 'false');
            entry.attr('aria-selected', 'true');
            if (selectedEntry.secretKey != undefined @(Html.Raw(Model.CurrentFRUserId.HasValue ? $"|| selectedEntry.userId == '{Model.CurrentFRUserId}'" : ""))) {
                $('#EditEntryButton, #RemoveEntryButton').removeAttr('disabled');
                if (selectedEntry.manualSecret)
                    $('#SetSecretKey').show();
                else
                    $('#SetSecretKey').hide();
            }
            else {
                $('#EditEntryButton, #RemoveEntryButton').attr('disabled', true);
                $('#SetSecretKey').show();
            }
        }
    }

    deselectEntry = function () {
        if (selectedEntry != undefined) {
            $(`li[entryId="${selectedEntry.entryId}"]`).attr('aria-selected', 'false');
            $('#EditEntryButton, #RemoveEntryButton').attr('disabled', true);
            $('#SetSecretKey').hide();
            selectedEntry = undefined;
        }
    }

    editEntry = function () {
        $('#EditModal #EntryViewModel_EntryId').val(selectedEntry.entryId);
        $('#EditModal #EntryViewModel_SecretKey').val(selectedEntry.secretKey);
        $('#EditModal #EntryViewModel_Remarks').val(selectedEntry.remarks);
        $('#EditModal').modal('show');
    }

    submitEdit = function () {
        $('#EditForm').submit();
    }

    addEntry = function() {
        $('#AddModal').modal('show');
    }

    deleteEntry = function () {
        if (selectedEntry != undefined && (selectedEntry.secretKey != undefined @(Html.Raw(Model.CurrentFRUserId.HasValue ? $"|| selectedEntry.userId == '{Model.CurrentFRUserId}'" : ""))))
            if (confirm("This will remove the selected entry from this ping list, are you sure?"))
                window.location.assign(`${location.protocol}//${location.host}${location.pathname}/removeEntry/${selectedEntry.entryId}/${selectedEntry.secretKey || '(user)'}@(string.IsNullOrEmpty(Model.SecretKey) ? "" : $"?secretKey={Model.SecretKey}")`);
    }

    setSecretKey = function () {
        if (selectedEntry != undefined && (selectedEntry.secretKey == undefined) || selectedEntry.manualSecret) {
            var secretKey = prompt(`Enter secret key for entry '${selectedEntry.entryId}'`);
            if (secretKey) {
                $(`li[entryId="${selectedEntry.entryId}"]`).attr('secretKey', secretKey);
                var storageVal = localStorage.getItem('@(Model.ListId)');
                var storage = storageVal ? JSON.parse(storageVal) : { };
                storage[selectedEntry.entryId] = secretKey;
                window.localStorage.setItem('@(Model.ListId)', JSON.stringify(storage));
            }
        }
    }
    @if(Model.SecretKey != null)
    {
        <text>
    updateUsers = function (e) {
        if (!confirm('Depending on the size of your pinglist and how many users have been updated recently, this may take a while. Are you sure?'))
            e.preventDefault();
    }
        </text>
    }
</script>