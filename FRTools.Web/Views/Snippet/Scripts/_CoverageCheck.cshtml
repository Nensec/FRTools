@model SkinCoverageScriptModel
@{
    int primaryColor = 1, secondaryColor = 1, tertiaryColor = 1, primaryGene = 0, secondaryGene = 0, tertiaryGene = 0, element = 1, eyeType = 0;
    if (CurrentUser != null && !string.IsNullOrEmpty(CurrentUser.ProfileSettings.DefaultAdvancedCoverageScry))
    {
        var scrySettingSplit = CurrentUser.ProfileSettings.DefaultAdvancedCoverageScry.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();
        primaryColor = scrySettingSplit[0];
        secondaryColor = scrySettingSplit[1];
        tertiaryColor = scrySettingSplit[2];
        primaryGene = scrySettingSplit[3];
        secondaryGene = scrySettingSplit[4];
        tertiaryGene = scrySettingSplit[5];
        element = scrySettingSplit[6];
        eyeType = scrySettingSplit[7];
    }

    string GetForegroundColor(Color backgroundColor)
    {
        var backgroundBrightness = System.Drawing.Color.FromArgb(Convert.ToInt32(backgroundColor.GetHex().Substring(1), 16)).GetBrightness();
        return backgroundBrightness < 0.4 ? "ffffff" : "000000";
    }
}

<div class="form-group">
    <select class="form-control" name="DragonType" id="DragonType">
        <option disabled>- Modern -</option>
        @foreach (var breed in GeneratedFRHelpers.GetModernBreeds())
        {
            <option value="@((int)breed)">@(breed.GetDescription())</option>
        }
        <option disabled>- Ancient -</option>
        @foreach (var breed in GeneratedFRHelpers.GetAncientBreeds())
        {
            <option value="@((int)breed)">@(breed.GetDescription())</option>
        }
    </select>
</div>
<div class="form-group">
    <select class="form-control" name="Gender" id="Gender">
        @foreach (var gender in Enum.GetValues(typeof(Gender)).Cast<Gender>())
        {
            <option value="@((int)gender)">@(gender.GetDescription())</option>
        }
    </select>
</div>
<div class="form-group">
    <div class="d-flex justify-content-start align-items-start">
        <div class="custom-control custom-switch">
            <input onchange="swapBaseImage()" type="checkbox" checked="@((CurrentUser?.ProfileSettings.DefaultAdvancedCoverageUseDressingRoomBase ?? true) ? null : "checked")" class="custom-control-input" id="UseDressingRoomDummy">
            <label class="custom-control-label" for="UseDressingRoomDummy"><span class="fa fa-info-circle text-info" title="Some dressing room dummies are not the same size as actual dragons resulting in 'outside pixels' where there aren't any, toggle this to use a scry image as your base image to compare coverage against" data-toggle="tooltip"></span> Switch between dressing room dummy and scry as base image</label>
        </div>
    </div>
</div>
<div class="scry-picker form-group" style="@((CurrentUser?.ProfileSettings.DefaultAdvancedCoverageUseDressingRoomBase ?? true) ? "display:none" : null)">
    <div class="form-group">
        <div class="d-flex">
            <select onchange="updateDummy()" class="form-control" name="Element" id="Element">
                @foreach (var ele in Enum.GetValues(typeof(Element)).Cast<Element>())
                {
                    <option selected="@(((int)ele) == element)" value="@((int)ele)">@(ele.GetDescription())</option>
                }
            </select>
            <select onchange="updateDummy()" class="form-control" name="EyeType" id="EyeType">
                @foreach (var eye in Enum.GetValues(typeof(EyeType)).Cast<EyeType>())
                {
                    <option selected="@(((int)eye) == eyeType)" value="@((int)eye)">@(eye.GetDescription())</option>
                }
            </select>
        </div>
        <div class="d-flex">
            <select onchange="updateDummy()" class="form-control" name="PrimaryColor" id="PrimaryColor">
                @foreach (var color in Enum.GetValues(typeof(Color)).Cast<Color>().Where(x => x != Color.Unknown))
                {
                    <option selected="@(((int)color) == primaryColor)" style="background-color:@(color.GetAttributeOfType<ColorAttribute>().ColorHexCode);color:#@(GetForegroundColor(color))" value="@((int)color)">@(color.GetDescription())</option>
                }
            </select>
            <select onchange="updateDummy()" class="form-control" name="SecondaryColor" id="SecondaryColor">
                @foreach (var color in Enum.GetValues(typeof(Color)).Cast<Color>().Where(x => x != Color.Unknown))
                {
                    <option selected="@(((int)color) == secondaryColor)" style="background-color:@(color.GetAttributeOfType<ColorAttribute>().ColorHexCode);color:#@(GetForegroundColor(color))" value="@((int)color)">@(color.GetDescription())</option>
                }
            </select>
            <select onchange="updateDummy()" class="form-control" name="TertiaryColor" id="TertiaryColor">
                @foreach (var color in Enum.GetValues(typeof(Color)).Cast<Color>().Where(x => x != Color.Unknown))
                {
                    <option selected="@(((int)color) == tertiaryColor)" style="background-color:@(color.GetAttributeOfType<ColorAttribute>().ColorHexCode);color:#@(GetForegroundColor(color))" value="@((int)color)">@(color.GetDescription())</option>
                }
            </select>
        </div>
        <div class="d-flex">
            <select onchange="updateDummy()" class="form-control" name="PrimaryGene" id="PrimaryGene">
                @foreach (var gene in Enum.GetValues(typeof(AllBodyGene)).Cast<AllBodyGene>())
                {
                    <option breeds="@(string.Join(",", gene.GetAttributeOfType<GeneAttribute>().ValidFor))" selected="@(((int)gene) == primaryGene)" value="@((int)gene)">@(gene.GetDescription())</option>
                }
            </select>
            <select onchange="updateDummy()" class="form-control" name="SecondaryGene" id="SecondaryGene">
                @foreach (var gene in Enum.GetValues(typeof(AllWingGene)).Cast<AllWingGene>())
                {
                    <option breeds="@(string.Join(",", gene.GetAttributeOfType<GeneAttribute>().ValidFor))" selected="@(((int)gene) == secondaryGene)" value="@((int)gene)">@(gene.GetDescription())</option>
                }
            </select>
            <select onchange="updateDummy()" class="form-control" name="TertiaryGene" id="TertiaryGene">
                @foreach (var gene in Enum.GetValues(typeof(AllTertiaryGene)).Cast<AllTertiaryGene>())
                {
                    <option breeds="@(string.Join(",", gene.GetAttributeOfType<GeneAttribute>().ValidFor))" selected="@(((int)gene) == tertiaryGene)" value="@((int)gene)">@(gene.GetDescription())</option>
                }
            </select>
        </div>
    </div>
    @if (Request.IsAuthenticated)
    {
        <div class="form-group">
            <button id="@(nameof(ProfileSettings.DefaultAdvancedCoverageScry))_status" class="btn btn-success w-100" data-placement="bottom" data-toggle="tooltip" title="Save this as a preset for your next visit" onclick="saveProfileSetting('@(nameof(ProfileSettings.DefaultAdvancedCoverageScry))', `${$('#PrimaryColor').val()};${$('#SecondaryColor').val()};${$('#TertiaryColor').val()};${$('#PrimaryGene').val()};${$('#SecondaryGene').val()};${$('#TertiaryGene').val()};${$('#Element').val()};${$('#EyeType').val()};`)" )>Save scry preset</button>
        </div>
    }
</div>
<div class="form-group">
    <span class="control-fileupload">
        <label for="file" class="text-left">Please choose a file on your computer.</label>
        <input type="file" accept=".png" name="Skin" id="Skin" />
    </span>
</div>
<hr />
<p class="text-center">
    Coverage: <b><span id="Coverage">--.--</span>%</b>
    Outside: <b><span id="Outside">--.--</span>%</b>
</p>
<div style="margin-top:5px; margin-bottom:-15px">
    <div id="advancedcoverage">
        <dib class="d-flex justify-content-center">
            <div id="imagecontainer" style="width:350px;height:350px;background-color:@(CurrentUser?.ProfileSettings.DefaultAdvancedCoverageBackgroundColor ?? "#000000")">
                <img class="dummyDragon" style="z-index:1;position:absolute;display:none;opacity:@((CurrentUser?.ProfileSettings.DefaultAdvancedCoverageDummyOpacity ?? 40) / 100d)" />
                <img class="preview" style="z-index:2;position:absolute;opacity:@((CurrentUser?.ProfileSettings.DefaultAdvancedCoverageSkinOpacity ?? 40) / 100d)" />
                <canvas id="overlay" style="z-index:2;position:absolute;" width="350" height="350" />
            </div>
        </dib>
        <hr />
        <div class="form-group row">
            <span class="col-12 col-sm-4">Dummy transparency</span>
            <div class="col col-sm-8 align-items-center">
                <div class="@(Request.IsAuthenticated ? "input-group" : "d-flex")">
                    <input class="flex-grow-1" id="@(nameof(ProfileSettings.DefaultAdvancedCoverageDummyOpacity))" oninput="$('#advancedcoverage .dummyDragon').css('opacity', this.value / 100);@(Request.IsAuthenticated ? $" resetSaveButton('{nameof(ProfileSettings.DefaultAdvancedCoverageDummyOpacity)}');" : "")" type="range" min="1" max="100" value="@(CurrentUser?.ProfileSettings.DefaultAdvancedCoverageDummyOpacity ?? 40)">
                    @SaveButton(nameof(ProfileSettings.DefaultAdvancedCoverageDummyOpacity))
                </div>
            </div>
        </div>
        <div class="form-group row">
            <span class="col-12 col-sm-4">Skin transparency</span>
            <div class="col col-sm-8 align-items-center">
                <div class="@(Request.IsAuthenticated ? "input-group" : "d-flex")">
                    <input class="flex-grow-1" id="@(nameof(ProfileSettings.DefaultAdvancedCoverageSkinOpacity))" oninput="$('#advancedcoverage .preview').css('opacity', this.value / 100);@(Request.IsAuthenticated ? $" resetSaveButton('{nameof(ProfileSettings.DefaultAdvancedCoverageSkinOpacity)}');" : "")" type="range" min="1" max="100" value="@(CurrentUser?.ProfileSettings.DefaultAdvancedCoverageSkinOpacity ?? 40)">
                    @SaveButton(nameof(ProfileSettings.DefaultAdvancedCoverageSkinOpacity))
                </div>
            </div>
        </div>
        <div class="form-group row">
            <span class="col-12 col-sm-4">Background color</span>
            <div class="col col-sm-8 align-items-center">
                <div class="@(Request.IsAuthenticated ? "input-group" : "d-flex")">
                    <input class="flex-grow-1" id="@(nameof(ProfileSettings.DefaultAdvancedCoverageBackgroundColor))" type="color" onchange="$('#advancedcoverage #imagecontainer').css('background-color', this.value);@(Request.IsAuthenticated ? $" resetSaveButton('{nameof(ProfileSettings.DefaultAdvancedCoverageBackgroundColor)}');" : "")" value="@(CurrentUser?.ProfileSettings.DefaultAdvancedCoverageBackgroundColor ?? "#000000")">
                    @SaveButton(nameof(ProfileSettings.DefaultAdvancedCoverageBackgroundColor))
                </div>
            </div>
        </div>
        <div class="form-group row">
            <span class="col-12 col-sm-4">Outside pixel overlay color</span>
            <div class="col col-sm-8 align-items-center">
                <div class="@(Request.IsAuthenticated ? "input-group" : "d-flex")">
                    <input class="flex-grow-1" id="@(nameof(ProfileSettings.DefaultAdvancedCoverageOverlayColor))" type="color" onchange="updateCoverage();@(Request.IsAuthenticated ? $" resetSaveButton('{nameof(ProfileSettings.DefaultAdvancedCoverageOverlayColor)}');" : "")" value="@(CurrentUser?.ProfileSettings.DefaultAdvancedCoverageOverlayColor ?? "#FF0000")">
                    @SaveButton(nameof(ProfileSettings.DefaultAdvancedCoverageOverlayColor))
                </div>
            </div>
        </div>
        <div class="form-group row">
            <span class="col-12 col-sm-4">Percentage precision</span>
            <div class="col col-sm-8 align-items-center">
                <div class="@(Request.IsAuthenticated ? "input-group" : "d-flex")">
                    <input class="flex-grow-1" id="@(nameof(ProfileSettings.DefaultAdvancedCoveragePercentagePrecision))" oninput="setPercentageValues();@(Request.IsAuthenticated ? $" resetSaveButton('{nameof(ProfileSettings.DefaultAdvancedCoveragePercentagePrecision)}');" : "")" type="range" min="0" max="10" value="@(CurrentUser?.ProfileSettings.DefaultAdvancedCoveragePercentagePrecision ?? 2)">
                    @SaveButton(nameof(ProfileSettings.DefaultAdvancedCoveragePercentagePrecision))
                </div>
            </div>
        </div>
    </div>
</div>

<canvas width="350" height="350" id="skin" style="display:none;"></canvas>
<canvas width="350" height="350" id="dragon" style="display:none;"></canvas>

<script type="text/javascript">
    snippetActivation['@Model.SanitizedName'] = () => {
        dragonImg = new Image();
        updateDummy();
    };

    snippetDeactivation['@Model.SanitizedName'] = () => {
        dragonImg = null;
        skinImg = null;
        coverage = null;
        outside = null;
    };

    swapBaseImage = () => {
        if ($('#UseDressingRoomDummy:checked').val()) {
            $('.scry-picker').show();
        } else {
            $('.scry-picker').hide();
        }
        updateDummy();
        @if (Request.IsAuthenticated)
        {
            @:saveProfileSetting('@(nameof(ProfileSettings.DefaultAdvancedCoverageUseDressingRoomBase))', !$('#UseDressingRoomDummy:checked').val());
        }
    };

    updateDummy = () => {
        if ($('#UseDressingRoomDummy:checked').val()) {
            $('#PrimaryColor').css('background-color', $('#PrimaryColor option:selected').css('background-color'));
            $('#PrimaryColor').css('color', $('#PrimaryColor option:selected').css('color'));
            $('#SecondaryColor').css('background-color', $('#SecondaryColor option:selected').css('background-color'));
            $('#SecondaryColor').css('color', $('#SecondaryColor option:selected').css('color'));
            $('#TertiaryColor').css('background-color', $('#TertiaryColor option:selected').css('background-color'));
            $('#TertiaryColor').css('color', $('#TertiaryColor option:selected').css('color'));

            var dragonType = $('#DragonType option:selected').text()

            $('#PrimaryGene option').hide();
            $(`#PrimaryGene option[breeds*="${dragonType}"]`).show();
            if ($('#PrimaryGene option:selected').css('display') == 'none') {
                $('#PrimaryGene').val(0);
            }

            $('#SecondaryGene option').hide();
            $(`#SecondaryGene option[breeds*="${dragonType}"]`).show();
            if ($('#SecondaryGene option:selected').css('display') == 'none') {
                $('#SecondaryGene').val(0);
            }

            $('#TertiaryGene option').hide();
            $(`#TertiaryGene option[breeds*="${dragonType}"]`).show();
            if ($('#TertiaryGene option:selected').css('display') == 'none') {
                $('#TertiaryGene').val(0);
            }
        }

        setDummySource();
    };

    setDummySource = () => {
        var dragonType = $('#DragonType').val();
        var gender = $('#Gender').val();

        if (!$('#UseDressingRoomDummy:checked').val()) {
            $('.dummyDragon').show().attr('src', `@Url.RouteUrl("GetDummyDragonQueryString")?dragonType=${dragonType}&gender=${gender}`);
        }
        else {
            var primaryGene = $('#PrimaryGene').val();
            var secondaryGene = $('#SecondaryGene').val();
            var tertiaryGene = $('#TertiaryGene').val();
            var primaryColor = $('#PrimaryColor').val();
            var secondaryColor = $('#SecondaryColor').val();
            var tertiaryColor = $('#TertiaryColor').val();
            var element = $('#Element').val();
            var eyeType = $('#EyeType').val();
            $('.dummyDragon').show().attr('src', `@Url.RouteUrl("GetScryQueryString")?breed=${dragonType}&gender=${gender}&age=1&bodygene=${primaryGene}&body=${primaryColor}&winggene=${secondaryGene}&wings=${secondaryColor}&tertgene=${tertiaryGene}&tert=${tertiaryColor}&element=${element}&eyetype=${eyeType}`);
        }

        var dragonImage = new Image();
        dragonImage.onload = () => {
            updateCoverage(undefined, dragonImage);
        };
        dragonImage.src = $('.dummyDragon').attr('src');
    };

    $('#DragonType, #Gender').change(updateDummy);

    $('#Skin').change(function() {
        var t = $(this).val();
        var labelText = 'File : ' + t.substr(12, t.length);
        $(this).prev('label').text(labelText);
        var file = this.files[0];
        var reader = new FileReader();

        reader.onload = e => {
            if (file && file.type === 'image/png') {
                var skinImage = new Image();
                skinImage.onload = () => {
                    $('.preview').show().attr('src', e.target.result);
                    updateCoverage(skinImage);
                };
                skinImage.src = e.target.result;
            }
            else {
                $('.preview').hide();
            }
        };

        reader.readAsDataURL(file);
    });

    var skinImg, dragonImg;
    var coverage, outside;

    updateCoverage = (skinImage, dragonImage) => {
        if (dragonImage === undefined) {
            dragonImage = dragonImg;
        } else {
            dragonImg = dragonImage;
        }

        if (skinImage === undefined) {
            skinImage = skinImg;
        } else {
            skinImg = skinImage;
        }

        if (!skinImage || !dragonImage)
            return;

        var dragonContext = $('#dragon')[0].getContext('2d');
        dragonContext.clearRect(0, 0, 350, 350);
        dragonContext.drawImage(dragonImage, 0, 0, 350, 350, 0, 0, 350, 350);

        var overlayContext = $('#overlay')[0].getContext('2d');
        var overlayImageData = overlayContext.createImageData(350, 350);

        var skinContext = $('#skin')[0].getContext('2d');
        skinContext.clearRect(0, 0, 350, 350);
        skinContext.drawImage(skinImage, 0, 0, 350, 350);

        var coveringAlphaSum = 0;
        var coveringPixelCount = 0;
        var outsideAlphaSum = 0;
        var outsidePixelCount = 0;

        var skinImageData = skinContext.getImageData(0, 0, 350, 350).data;
        var dragonImageData = dragonContext.getImageData(0, 0, 350, 350).data;

        var overlayColorR, overlayColorG, overlayColorB;

        var overlayColor = $('#@(nameof(ProfileSettings.DefaultAdvancedCoverageOverlayColor))').val();
        overlayColorR = parseInt('0x' + overlayColor.substr(1, 2));
        overlayColorG = parseInt('0x' + overlayColor.substr(3, 2));
        overlayColorB = parseInt('0x' + overlayColor.substr(5, 2));

        for (var i = 0; i < skinImageData.length; i += 4) {
            if (dragonImageData[i + 3] > 95) {
                coveringAlphaSum += skinImageData[i + 3];
                coveringPixelCount++;
            }
            else {
                if (dragonImageData[i + 3] == 0) {
                    outsideAlphaSum += skinImageData[i + 3];
                    outsidePixelCount++;

                    if (skinImageData[i + 3] != 0) {
                        overlayImageData.data[i] = overlayColorR;
                        overlayImageData.data[i + 1] = overlayColorG;
                        overlayImageData.data[i + 2] = overlayColorB;
                        overlayImageData.data[i + 3] = 255;
                    }
                }
            }
        }

        overlayContext.putImageData(overlayImageData, 0, 0);

        coverage = (coveringAlphaSum / coveringPixelCount / 255 * 100);
        outside = (outsideAlphaSum / outsidePixelCount / 255 * 100);

        setPercentageValues();
    };

    setPercentageValues = () => {
        if (coverage !== undefined && outside !== undefined) {
            var precision = $('#@(nameof(ProfileSettings.DefaultAdvancedCoveragePercentagePrecision))').val();
            $('#Coverage').html(coverage.toFixed(precision));
            $('#Outside').html(outside.toFixed(precision));
        }
        else {
            $('#Coverage, #Outside').html('--.--');
        }
    }
</script>

@helper SaveButton(string key)
{
    if (Request.IsAuthenticated)
    {
        <span class="input-group-btn" style="padding-left:5px;">
            <button id="@(key)_status" data-placement="right" data-toggle="tooltip" title="Save this value as your default" class="btn btn-success btn-xs" onclick="saveProfileSetting('@(key)', $('#@(key)')[0].value)">Save</button>
        </span>
    }
}
