@model ManageModelViewModel

@{

    ViewBag.Title = "Manage";
    var previews = Model.Skin.Previews.Select((x, i) => (x, i)).ToList();
    var scries = previews.Where(x => x.Item1.DragonId == null).ToList();
    var reals = previews.Where(x => x.Item1.DragonId != null).GroupBy(x => x.Item1.DragonId).Select(x => x.First()).ToList();
    var previewDragons = reals.Concat(scries).Select(x => DragonCache.FromString(x.Item1.DragonData));
}

@section head {
    @Scripts.Render("~/bundles/chartjs")
}

<div class="row">
    <div class="col-md-7">
        <div class="card mt-3">
            <div class="card-header">
                <h5>
                    Manage: @(Model.Skin.Title)
                    <sup>
                        @(Model.Skin.Version != 1 ? $"v{Model.Skin.Version}" : "")
                    </sup>
                </h5>
            </div>
            <div class="card-body">
                <p>
                    Here you can edit your skin's details and view what people have previewed your skin on
                </p>
                <div>
                    @Html.Partial("_ManageEditSkin", new ManageModelPost
                    {
                        Title = Model.Skin.Title,
                        Description = Model.Skin.Description,
                        DragonType = (DragonType)Model.Skin.DragonType,
                        Gender = (Gender)Model.Skin.GenderType,
                        Visibility = Model.Skin.Visibility
                    })
                </div>
            </div>
        </div>
        <div class="card mt-3">
            <div class="card-header">
                Your share link
            </div>
            <div class="card-body">
                <div class="form-group row">
                    <span class="col">Click <a href="@Url.RouteUrl("Preview", new { skinId = Model.Skin.GeneratedId }, "https")">here</a> to go to your preview page.</span>
                </div>
                <div class="form-group row">
                    <label style="padding-top:7px; text-align:left" class="col-4" for="PreviewLink">
                        <span class="fa fa-warning text-danger" data-toggle="tooltip" title="This link will not work on the Flight Rising forums due to their censorship of off-site tools."></span> Your link
                    </label>
                    <div class="col-8">
                        @Html.CopyTextBox(Url.RouteUrl("Preview", new { skinId = Model.Skin.GeneratedId }, "https"), "PreviewLink", "skin", Model.Skin.GeneratedId)
                    </div>
                </div>
            </div>
        </div>
        <div class="card mt-3">
            <div class="card-header">
                These are the previews people have generated with your skin
            </div>
            <div class="card-body">
                @if (Model.Skin.Previews.Any())
                {
                    <div class="row">
                        <div class="col-2 ml-n3 pr-0">
                            <!-- Indicators -->
                            <ol class="carousel-minis carousel-indicators">
                                @foreach (var preview in previews)
                                {
                                    <li data-item="@(preview.Item2)" data-target="#carousel-previews" data-slide-to="@(preview.Item2)" class="@(preview.Item2 == 0 ? "active" : "")">
                                        <img src="@(Model.CDNBasePath + preview.Item1.PreviewImage)" />
                                    </li>
                                }
                            </ol>
                        </div>
                        <div class="col-10 px-0">
                            <div id="carousel-previews" class="carousel slide" data-ride="carousel">
                                <!-- Wrapper for slides -->
                                <div class="carousel-inner">
                                    @foreach (var preview in previews)
                                    {
                                        var dragon = DragonCache.FromString(preview.Item1.DragonData);
                                        <div class="carousel-item img-fluid @(preview.Item2 == 0 ? "active" : "")" data-item="@(preview.Item2)">
                                            <div class="row justify-content-center">
                                                <img id="Preview@(preview.Item2)" src="@(Model.CDNBasePath + preview.Item1.PreviewImage)" data-toggle="popover">
                                                <div id="Preview@(preview.Item2)_popover" class="d-none">
                                                    <ul class="list-unstyled p-0 mb-1">
                                                        <li><b>Colors:</b> @(dragon.BodyColor) / @(dragon.WingColor) / @(dragon.TertiaryColor)</li>
                                                        <li><b>Genes:</b> @(dragon.GetPrimaryGene().ToString()) / @(dragon.GetSecondaryGene().ToString()) / @(dragon.GetTertiaryGene().ToString())</li>

                                                        <li><b>Element:</b> @(dragon.Element)</li>
                                                        <li><b>Eyetype:</b> @(dragon.EyeType.GetDescription())</li>
                                                    </ul>
                                                </div>
                                            </div>
                                            <div class="text-center">
                                                @if (preview.Item1.Version != Model.Skin.Version)
                                                {
                                                    <p>
                                                        <i>Older version skin: <b>v@(preview.Item1.Version)</b></i>
                                                    </p>
                                                }
                                                <b>@(preview.Item1.DragonId != null ? "Real dragon" : "Scry dragon")</b>
                                                @if (preview.Item1.ScryerUrl != null)
                                                {
                                                    @: - <a href="@($"https://www1.flightrising.com/scrying/predict?breed={(int)dragon.DragonType}&gender={(int)dragon.Gender}&age={(int)dragon.Age}&bodygene={dragon.BodyGene}&body={(int)dragon.BodyColor}&winggene={dragon.WingGene}&wings={(int)dragon.WingColor}&tertgene={dragon.TertiaryGene}&tert={(int)dragon.TertiaryColor}&element={(int)dragon.Element}&eyetype={(int)dragon.EyeType}")" target="_blank">Visit scrying workshop</a>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p>Nobody has generated any previews yet : (</p>
                }
            </div>
        </div>
    </div>
    <div class="col-md-5">
        <div class="card mt-3">
            <div class="card-body">
                <div class="text-center">
                    <img class="img-fluid" src="@(Model.CDNBasePath + Model.PreviewImageUrl)" />
                </div>
                <div>
                    <p class="text-center">
                        Coverage: <b>@(Model.Skin.Coverage)%</b> (@(Model.Skin.Coverage <= 30 ? "Accent" : "Skin"))
                    </p>
                </div>
            </div>
        </div>
        <div class="card mt-3">
            <div class="card-header">
                Fancy graphs and stats
            </div>
            <div class="card-body">
                @if (previews.Any())
                {
                    var previewsPerDay = scries.Concat(reals).Where(x => x.Item1.PreviewTime != null).GroupBy(x => x.Item1.PreviewTime.Value.Date).Select(x => (x.Key, x.Count()));
                    <div>
                        <p>
                            <b>Previews:</b> @(scries.Count + reals.Count) total <span class="small">(@(reals.Count) real, @(scries.Count) @(scries.Count == 1 ? "scry" : "scries"))</span><br />
                            <b>Avg. Daily:</b> @(previewsPerDay.Any() ? previewsPerDay.Average(x => x.Item2) : 0) previews
                        </p>
                    </div>
                    <canvas id="PreviewGraph" style="height:200px; width:100%;"></canvas>
                    <div style="margin-bottom:5px">
                        <b>Color usage</b>
                    </div>
                    <canvas id="PrimaryColorGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <canvas id="SecondaryColorGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <canvas id="TertiaryColorGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <div style="margin-bottom:5px">
                        <b>Gene usage</b>
                    </div>
                    <canvas id="PrimaryGeneGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <canvas id="SecondaryGeneGraph" style="height:140px; width:33%;float:left;"></canvas>
                    <canvas id="TertiaryGeneGraph" style="height:140px; width:33%;float:left;"></canvas>
                }
                else
                {
                    <p>Nobody has generated any previews yet : (</p>
                }
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <div class="card mt-3 border-danger">
            <div class="card-header">
                Thar be dangerous stuff 'ere
            </div>
            <div class="card-body">
                <div class="form-group">
                    This will permanently delete your skin!&nbsp;
                    <div class="d-flex justify-content-end">
                        <span>
                            <a class="btn btn-sm btn-danger" href="@Url.RouteUrl("Delete", new { SkinId = Model.Skin.GeneratedId, SecretKey = Model.Skin.SecretKey })" onclick="return userConfirm();">Delete your skin</a>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    userConfirm = function () {
        return confirm("This will permanently delete your skin from this tool, are you sure?");
    };
    @{
        var previewTimeData = reals.Concat(scries).Where(x => x.Item1.PreviewTime != null).Select(x => x.Item1.PreviewTime).OrderBy(x => x.Value).GroupBy(x => x.Value.Date).Select(x => (x.First().Value.ToString("dd/MM/yyyy"), x.Count()));
        var previewColorData = previewDragons.Select(x => (x.BodyColor, x.WingColor, x.TertiaryColor)).ToList();
        var previewGeneData = previewDragons.Select(x => (x.GetPrimaryGene().ToString(), x.GetSecondaryGene().ToString(), x.GetTertiaryGene().ToString())).ToList();
    }
    $(document).ready(function () {
        $('#carousel-previews').on('slide.bs.carousel', function (event) {
            var item = $(event.relatedTarget).attr('data-item');
            $('.carousel-indicators li.active').removeClass('active');
            $(`.carousel-indicators li[data-item="${item}"]`).addClass('active');
        });
        var chartOptions = {
            plugins: { colorschemes: { scheme: 'brewer.Set3-12' } },
            responsive: false,
            legend: { display: false }
        };
        new Chart(document.getElementById(`PreviewGraph`).getContext('2d'), {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewTimeData.Select(x => $"'{x.Item1}'")))],
                datasets: [{
                    label: 'Previews',
                    data: [@string.Join(", ", previewTimeData.Select(x => x.Item2))],
                    borderColor: '#bce8f1',
                    backgroundColor: '#d9edf7'
                }]
            },
            options: {
                legend: { display: false }
            }
        });
        new Chart(document.getElementById(`PrimaryColorGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item1).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Primary',
                    data: [@string.Join(", ", previewColorData.GroupBy(x => x.Item1).Select(x => x.Count()))],
                    backgroundColor: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item1).Select(x => $"'{x.Key.GetHex()}'")))]
                }]
            },
            options: chartOptions
        });
        new Chart(document.getElementById(`SecondaryColorGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item2).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Secondary',
                    data: [@string.Join(", ", previewColorData.GroupBy(x => x.Item2).Select(x => x.Count()))],
                    backgroundColor: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item2).Select(x => $"'{x.Key.GetHex()}'")))]
                }]
            },
            options: chartOptions
        });
        new Chart(document.getElementById(`TertiaryColorGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item3).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Tertiary',
                    data: [@string.Join(", ", previewColorData.GroupBy(x => x.Item3).Select(x => x.Count()))],
                    backgroundColor: [@Html.Raw(string.Join(", ", previewColorData.GroupBy(x => x.Item3).Select(x => $"'{x.Key.GetHex()}'")))]
                }]
            },
            options: chartOptions
        });
        new Chart(document.getElementById(`PrimaryGeneGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewGeneData.GroupBy(x => x.Item1).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Primary',
                    data: [@string.Join(", ", previewGeneData.GroupBy(x => x.Item1).Select(x => x.Count()))]
                }]
            },
            options: chartOptions
        });
        new Chart(document.getElementById(`SecondaryGeneGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewGeneData.GroupBy(x => x.Item2).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Secondary',
                    data: [@string.Join(", ", previewGeneData.GroupBy(x => x.Item2).Select(x => x.Count()))]
                }]
            },
            options: chartOptions
        });
        new Chart(document.getElementById(`TertiaryGeneGraph`).getContext('2d'), {
            type: 'pie',
            data: {
                labels: [@Html.Raw(string.Join(", ", previewGeneData.GroupBy(x => x.Item3).Select(x => $"'{x.Key.ToString()}'")))],
                datasets: [{
                    label: 'Tertiary',
                    data: [@string.Join(", ", previewGeneData.GroupBy(x => x.Item3).Select(x => x.Count()))]
                }]
            },
            options: chartOptions
        });
    });

    $("[data-toggle=popover]").each(function (i, obj) {
        $(this).popover({
            html: true,
            sanitize: false,
            content: function () {
                var id = $(this).attr('id');
                return $(`#${id}_popover`).html();
            },
            trigger: 'hover focus',
            container: 'body'
        });

    });
</script>

<style>
    .popover {
        max-width: 100%;
        z-index: 100;
    }


    .carousel-minis {
        display: block;
        position: initial;
        margin-right: 0;
        overflow-y: auto;
        max-height: 370px;
        direction: rtl;
        padding-right: 0;
        width: unset;
        margin-bottom: 0;
        margin-left: 0;
    }

        .carousel-minis li:hover {
            opacity: 1;
        }

        .carousel-minis li {
            direction: ltr;
            display: block;
            background: unset;
            border: unset;
            text-indent: 0;
            width: unset;
            height: unset;
            transition: all 1s ease-in-out;
            -moz-transition: all 1s ease-in-out;
            -webkit-transition: all 1s;
            padding: 3px;
        }

            .carousel-minis li.active {
                background-color: #d9edf7;
            }

            .carousel-minis li img {
                width: 100%;
                height: 100%;
            }
</style>
