@model FRTools.Common.DiscordSettingViewModel
@{
    var id = Html.Id(Model.Key);
    var name = Html.Name(Model.Key);
}
<div class="input-group">
    @{
        var channels = Model.ParentServer.Channels.AsEnumerable();
        var settingType = Type.GetType(Model.SettingType);
        var fallBack = Model.SettingType.Split(',')[0];
        if (fallBack.Contains("."))
        {
            fallBack = fallBack.Split('.')[1];
        }
    }
    <div class="input-group-prepend @(settingType == typeof(bool) ? "input-group-addon-close" : "")">
        <span id="@(Html.Id(Model.Key))_status" class="input-group-text"><span style="display:block; width:75px">Unchanged</span></span>
    </div>
    @if (!(settingType?.IsArray == true || fallBack.EndsWith("[]")))
    {
        switch (settingType?.Name ?? fallBack)
        {
            case "ITextChannel":
                channels = Model.ParentServer.Channels.Where(x => x.DiscordChannelType == FRTools.Data.DataModels.DiscordChannelType.Text);
                goto case "IChannel";
            case "IVoiceChannel":
                channels = Model.ParentServer.Channels.Where(x => x.DiscordChannelType == FRTools.Data.DataModels.DiscordChannelType.Voice);
                goto case "IChannel";
            case "ICategoryChannel":
                channels = Model.ParentServer.Channels.Where(x => x.DiscordChannelType == FRTools.Data.DataModels.DiscordChannelType.Category);
                goto case "IChannel";
            case "IChannel":
                <select id="@(id)" name="@(name)" configKey="@(Model.Key)" class="form-control" onchange="saveDiscordSetting('@(Model.Key)', this.value)">
                    <option></option>
                    @{ var channelGroups = channels.GroupBy(x => x.DiscordChannelType); }
                    @foreach (var channelGroup in channelGroups)
                    {
                        <option disabled readonly>- @(channelGroup.Key) -</option>
                        foreach (var channel in channelGroup)
                        {
                            <option @(channel.ChannelId.ToString() == Model.Value ? "selected" : "") value="@(channel.ChannelId)">@(channel.ChannelName)</option>
                        }
                    }
                </select>
                if (channels.Any(x => x.DiscordChannelType == FRTools.Data.DataModels.DiscordChannelType.Text))
                {
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-secondary" data-toggle="tooltip" title="Check the permissions for this channel by sending a test to it" onclick="sendTestMessage('@(Model.Key)')">Send test message</button>
                    </div>
                    if (!Context.Items.Contains("SendTestMessageScript"))
                    {
                        Context.Items.Add("SendTestMessageScript", true);
                        <script>
                        sendTestMessage = key => {
                            $.post({
                                url: '@Url.RouteUrl("DiscordSendTestMessage")',
                                data: {
                                    discordServer: '@(Model.ParentServer.ServerId)',
                                    module: @(Model.Module == null ? "undefined" : $"`{Model.Module}`"),
                                    key: key
                                }
                            })
                        }
                        </script>
                    }
                }
                break;
            case "IRole":
                <select id="@(id)" name="@(name)" configKey="@(Model.Key)" class="form-control" onchange="saveDiscordSetting('@(Model.Key)', this.value)">
                    <option></option>
                    @foreach (var role in Model.ParentServer.Roles)
                    {
                        <option @(role.RoleId.ToString() == Model.Value ? "selected" : "") value="@(role.RoleId)">@(role.RoleName)</option>
                    }
                </select>
                break;
            case nameof(Boolean):
                string enabled = "True", disabled = "False";
                if (Model.ExtraArgs?.Length == 2)
                {
                    enabled = Model.ExtraArgs[0];
                    disabled = Model.ExtraArgs[1];
                }
                <div class="d-flex align-items-center flex-grow-1 border pl-2">
                    @if (enabled != "True" && disabled != "False")
                    {
                        <span class="fa fa-info-circle" title="On = <b class='text-warning'>@enabled</b>, Off = <b class='text-warning'>@disabled</b>" data-toggle="tooltip"></span>
                    }
                    <div class="custom-control custom-switch ml-1">
                        <input type="checkbox" id="@(id)" name="@(name)" class="custom-control-input" @(bool.TryParse(Model.Value, out var r) && r ? "checked" : "") onchange="saveDiscordSetting('@(Model.Key)', this.checked)" />
                        <label class="custom-control-label" for="@(id)">
                            &nbsp;
                        </label>
                    </div>
                </div>
                break;
            case nameof(Int32):
                <input id="@(id)" name="@(name)" type="number" value="@(Model.Value)" class="form-control" />
                <script>
                $(document).ready(function () { $('#@(id)').on('input', $.debounce(500, save_@(Model.Key))); });
                save_@(Model.Key) = function (event) { saveDiscordSetting('@(Model.Key)', this.value); }
                </script>
                break;
            case nameof(String):
            default:
                <input id="@(id)" name="@(name)" type="text" value="@(Model.Value)" class="form-control" />
                <script>
                $(document).ready(function () { $('#@(id)').on('input', $.debounce(500, save_@(Model.Key))); });
                save_@(Model.Key) = function (event) { saveDiscordSetting('@(Model.Key)', this.value); }
                </script>
                break;
        }
    }
    else
    {
        // array
        string[] currentValue = new string[] { };
        var arrayType = settingType?.GetElementType();
        <select id="@(id)" name="@(name)" configKey="@(Model.Key)" multiple class="form-control" title="Hold CTRL to select multiple" data-toggle="tooltip">
            @if (arrayType?.IsEnum == true)
            {
                if (Model.Value == "ALL")
                {
                    currentValue = Enum.GetValues(arrayType).Cast<Enum>().Select(x => x.ToString()).ToArray();
                }
                else
                {
                    currentValue = Model.Value?.Split(',') ?? new string[] { };
                }
                foreach (var option in Enum.GetValues(arrayType))
                {
                    <option @(currentValue?.Contains(((int)option).ToString()) == true ? "selected" : "") value="@((int)option)">@option.ToString()</option>
                }
            }
            else
            {
                if (arrayType != null)
                {
                    if (Model.Value == "ALL")
                    {
                        currentValue = Model.ExtraArgs;
                    }
                    else
                    {
                        currentValue = Model.Value?.Split(',') ?? new string[] { };
                    }
                    foreach (var option in Model.ExtraArgs)
                    {
                        <option @(currentValue?.Contains(option) == true ? "selected" : "") value="@option">@option</option>
                    }
                }
                else
                {
                    var discordType = fallBack.Replace("[]", "");
                    switch (discordType)
                    {
                        case "ITextChannel":
                            channels = Model.ParentServer.Channels.Where(x => x.DiscordChannelType == FRTools.Data.DataModels.DiscordChannelType.Text);
                            goto case "IChannel";
                        case "IVoiceChannel":
                            channels = Model.ParentServer.Channels.Where(x => x.DiscordChannelType == FRTools.Data.DataModels.DiscordChannelType.Voice);
                            goto case "IChannel";
                        case "ICategoryChannel":
                            channels = Model.ParentServer.Channels.Where(x => x.DiscordChannelType == FRTools.Data.DataModels.DiscordChannelType.Category);
                            goto case "IChannel";
                        case "IChannel":
                            if (Model.Value == "ALL")
                            {
                                currentValue = channels.Select(x => x.ChannelId.ToString()).ToArray();
                            }
                            else
                            {
                                currentValue = Model.Value?.Split(',') ?? new string[] { };
                            }
                            var channelGroups = channels.GroupBy(x => x.DiscordChannelType);
                            foreach (var channelGroup in channelGroups)
                            {
                                <option disabled readonly>- @(channelGroup.Key) -</option>
                                foreach (var channel in channelGroup)
                                {
                                    <option @(currentValue.Contains(channel.ChannelId.ToString()) ? "selected" : "") value="@(channel.ChannelId)">@(channel.ChannelName)</option>
                                }
                            }
                            break;
                    }
                }
            }
        </select>
        <script>
            $(document).ready(function () { $('#@(id)').on('change', $.debounce(500, save_@(Model.Key))); });
            save_@(Model.Key) = function (event) { saveDiscordSetting('@(Model.Key)', $('#@(id)').val().join(',')); }
        </script>
    }
</div>

@if (!Context.Items.Contains("saveDiscordSettingScript"))
{
    Context.Items.Add("saveDiscordSettingScript", true);
    <script>
        saveDiscordSetting = function (key, value) {
            var statusElm = $(`#@Html.IdForModel()_${key}_status`);
            statusElm.removeClass('bg-success bg-danger border-success border-danger text-white').toggleClass('bg-warning border-warning').find($('span')).html('Saving..');
            $.post({
                url: '@Url.RouteUrl("DiscordSaveSetting")',
                data: {
                    discordServer: '@(Model.ParentServer.ServerId)',
                    module: @(Model.Module == null ? "undefined" : $"`{Model.Module}`"),
                    key: key,
                    value: value
                }
            }).done(function (data) { statusElm.toggleClass('bg-warning border-warning').toggleClass('bg-success border-success text-white').find($('span')).html('Saved!'); })
                .fail(function (data) { statusElm.toggleClass('bg-warning border-warning').toggleClass('bg-danger border-danger text-white').find($('span')).html('Error!'); });
        }
    </script>
}
